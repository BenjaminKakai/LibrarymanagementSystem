{"ast":null,"code":"var _jsxFileName = \"/home/benjamin/LibrarymanagementSystem/src/BookCatalog/BookCatalog.js\",\n  _s = $RefreshSig$();\n// src/BookCatalog/BookCatalog.js\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport './BookCatalog.css'; // Adjust the path according to your file structure\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BookCatalog = () => {\n  _s();\n  const [books, setBooks] = useState([]);\n  const [error, setError] = useState(''); // State to store error messages\n\n  useEffect(() => {\n    fetch('http://localhost:8081/api/books').then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to fetch books: ' + response.statusText);\n      }\n      return response.json();\n    }).then(data => {\n      setBooks(data);\n      setError(''); /* Clear any previous errors on successful fetch */\n    }).catch(error => {\n      console.error(\"There was an error fetching the books:\", error);\n      setError(error.message); /* Set error state to display in the UI */\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"book-catalog\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Book Catalog\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: books.map(book => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: `/books/${book.id}`,\n          children: book.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this), \" - \", book.author]\n      }, book.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(BookCatalog, \"1X/l1N4MZhLx14WsGvJdMvysrKI=\");\n_c = BookCatalog;\nexport default BookCatalog;\nvar _c;\n$RefreshReg$(_c, \"BookCatalog\");","map":{"version":3,"names":["React","useState","useEffect","Link","jsxDEV","_jsxDEV","BookCatalog","_s","books","setBooks","error","setError","fetch","then","response","ok","Error","statusText","json","data","catch","console","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","book","to","id","name","author","_c","$RefreshReg$"],"sources":["/home/benjamin/LibrarymanagementSystem/src/BookCatalog/BookCatalog.js"],"sourcesContent":["// src/BookCatalog/BookCatalog.js\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport './BookCatalog.css'; // Adjust the path according to your file structure\n\nconst BookCatalog = () => {\n  const [books, setBooks] = useState([]);\n  const [error, setError] = useState(''); // State to store error messages\n\n  useEffect(() => {\n    fetch('http://localhost:8081/api/books')\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Failed to fetch books: ' + response.statusText);\n        }\n        return response.json();\n      })\n      .then(data => {\n        setBooks(data);\n        setError(''); /* Clear any previous errors on successful fetch */\n      })\n      .catch(error => {\n        console.error(\"There was an error fetching the books:\", error);\n        setError(error.message); /* Set error state to display in the UI */\n      });\n  }, []);\n\n  return (\n    <div className=\"book-catalog\">\n      <h2>Book Catalog</h2>\n      {error && <div className=\"error-message\">Error: {error}</div>} {/* Display error message if any */}\n      <ul>\n        {books.map(book => (\n          <li key={book.id}>\n            <Link to={`/books/${book.id}`}>{book.name}</Link> - {book.author}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default BookCatalog;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAO,mBAAmB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAExCC,SAAS,CAAC,MAAM;IACdU,KAAK,CAAC,iCAAiC,CAAC,CACrCC,IAAI,CAACC,QAAQ,IAAI;MAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,GAAGF,QAAQ,CAACG,UAAU,CAAC;MAClE;MACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACDL,IAAI,CAACM,IAAI,IAAI;MACZV,QAAQ,CAACU,IAAI,CAAC;MACdR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;IAChB,CAAC,CAAC,CACDS,KAAK,CAACV,KAAK,IAAI;MACdW,OAAO,CAACX,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;MAC9DC,QAAQ,CAACD,KAAK,CAACY,OAAO,CAAC,CAAC,CAAC;IAC3B,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEjB,OAAA;IAAKkB,SAAS,EAAC,cAAc;IAAAC,QAAA,gBAC3BnB,OAAA;MAAAmB,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACpBlB,KAAK,iBAAIL,OAAA;MAAKkB,SAAS,EAAC,eAAe;MAAAC,QAAA,GAAC,SAAO,EAACd,KAAK;IAAA;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EAAC,GAAC,eAC/DvB,OAAA;MAAAmB,QAAA,EACGhB,KAAK,CAACqB,GAAG,CAACC,IAAI,iBACbzB,OAAA;QAAAmB,QAAA,gBACEnB,OAAA,CAACF,IAAI;UAAC4B,EAAE,EAAG,UAASD,IAAI,CAACE,EAAG,EAAE;UAAAR,QAAA,EAAEM,IAAI,CAACG;QAAI;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,OAAG,EAACE,IAAI,CAACI,MAAM;MAAA,GADzDJ,IAAI,CAACE,EAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEZ,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACrB,EAAA,CAnCID,WAAW;AAAA6B,EAAA,GAAX7B,WAAW;AAqCjB,eAAeA,WAAW;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}